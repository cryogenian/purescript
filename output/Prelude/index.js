// Generated by psc-make version 0.6.9.3
"use strict";

    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;

    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;

    function showNumberImpl(n) {
      return n.toString();
    }
    ;

    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;

    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;

    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;

    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;

    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;

    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;

    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;

    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;

    function eqArrayImpl(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length) return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i])) return false;
          }
          return true;
        };
      };
    }
    ;

    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;

    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;

    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;

    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;

    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;

    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;

    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;

    function numComplement(n) {
      return ~n;
    }
    ;

    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;

    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;

    function boolNot(b) {
      return !b;
    }
    ;

    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;

/**
 *  | The `Unit` type has a single inhabitant, called `unit`. It represents values with no computational content.
 *  |
 *  | `Unit` is often used, wrapped in a monadic type constructor, as the return type of a computation where only
 *  | the _effects_ are important.
 */
var Unit = function (x) {
    return x;
};

/**
 *  | The `Ordering` data type represents the three possible outcomes of comparing two values:
 *  |
 *  | `LT` - The first value is _less than_ the second.
 *  | `GT` - The first value is _greater than_ the second.
 *  | `EQ` - The first value is _equal to_ or _incomparable to_ the second.
 */
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();

/**
 *  | The `Ordering` data type represents the three possible outcomes of comparing two values:
 *  |
 *  | `LT` - The first value is _less than_ the second.
 *  | `GT` - The first value is _greater than_ the second.
 *  | `EQ` - The first value is _equal to_ or _incomparable to_ the second.
 */
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();

/**
 *  | The `Ordering` data type represents the three possible outcomes of comparing two values:
 *  |
 *  | `LT` - The first value is _less than_ the second.
 *  | `GT` - The first value is _greater than_ the second.
 *  | `EQ` - The first value is _equal to_ or _incomparable to_ the second.
 */
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();

/**
 *  | A `Semigroupoid` is similar to a [`Category`](#category) but does not require an identity
 *  | element `id`, just composable morphisms.
 *  |
 *  | `Semigroupoid`s should obey the following rule:
 *  |
 *  | - Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`
 *  |
 *  | One example of a `Semigroupoid` is the function type constructor `(->)`, with `(<<<)` defined
 *  | as function composition.
 */
var Semigroupoid = function ($less$less$less) {
    this["<<<"] = $less$less$less;
};

/**
 *  | `Category`s consist of objects and composable morphisms between them, and as such are
 *  | [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids` must have an identity element.
 *  |
 *  | `Category`s should obey the following rules.
 *  |
 *  | - Left Identity: `id <<< p = p`
 *  | - Right Identity: `p <<< id = p`
 *  |
 */
var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};

/**
 *  | The `Show` type class represents those types which can be converted into a human-readable `String` representation.
 *  |
 *  | While not required, it is recommended that for any expression `x`, the string `show x` be executable PureScript code
 *  | which evaluates to the same value as the expression `x`.
 */
var Show = function (show) {
    this.show = show;
};

/**
 *  | A `Functor` is a type constructor which supports a mapping operation `(<$>)`.
 *  |
 *  | `(<$>)` can be used to turn functions `a -> b` into functions `f a -> f b` whose argument and return
 *  | types use the type constructor `f` to represent some computational context.
 *  |
 *  | `Functor` instances should satisfy the following laws:
 *  |
 *  | - Identity: `(<$>) id = id`
 *  | - Composition: `(<$>) (f <<< g) = (f <$>) <<< (g <$>)`
 *  |
 */
var Functor = function ($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};

/**
 *  | The `Apply` class provides the `(<*>)` which is used to apply a function to an argument under a type constructor.
 *  |
 *  | `Apply` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor `f`.
 *  | It might also be understood in terms of the `lift2` function:
 *  |
 *  | ```purescript
 *  | lift2 :: forall f a b c. (Apply f) => (a -> b -> c) -> f a -> f b -> f c
 *  | lift2 f a b = f <$> a <*> b
 *  | ```
 *  |
 *  | `(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts the function application operator `($)` to arguments
 *  | wrapped with the type constructor `f`.
 *  |
 *  | `Apply` instances should satisfy the following law:
 *  |
 *  | - Associative Composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`
 *  |
 *  | Formally, `Apply` represents a strong lax semi-monoidal endofunctor.
 */
var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};

/**
 *  | The `Applicative` type class extends the [`Apply`](#apply) type class with a `pure` function, which can be used to
 *  | create values of type `f a` from values of type `a`.
 *  |
 *  | Where [`Apply`](#apply) provides the ability to lift functions of two or more arguments to functions whose arguments are wrapped using `f`,
 *  | and [`Functor`](#functor) provides the ability to lift functions of one argument, `pure` can be seen as the function which lifts functions of
 *  | _zero_ arguments. That is, `Applicative` functors support a lifting operation for any number of function arguments.
 *  |
 *  | `Applicative` instances should satisfy the following laws:
 *  |
 *  | - Identity: `(pure id) <*> v = v`
 *  | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`
 *  | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`
 *  | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
 *  |
 */
var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};

/**
 *  | The `Bind` type class extends the [`Apply`](#apply) type class with a "bind" operation `(>>=)` which composes computations
 *  | in sequence, using the return value of one computation to determine the next computation.
 *  |
 *  | The `>>=` operator can also be expressed using `do` notation, as follows:
 *  |
 *  | ```purescript
 *  | x >>= f = do y <- x
 *  |              f y
 *  | ```
 *  |
 *  | where the function argument of `f` is given the name `y`.
 *  |
 *  | `Bind` instances should satisfy the following law:
 *  |
 *  | - Associativity: `(x >>= f) >>= g = x >>= (\k => f k >>= g)`
 *  |
 *  | Or, expressed using `do` notation:
 *  |
 *  | - Associativity: `do { z <- do { y <- x ; f y } ; g z } = do { k <- x ; do { y <- f k ; g y } }`
 *  |
 *  | Associativity tells us that we can regroup operations which use do-notation, so that we can unambiguously write, for example:
 *  |
 *  | ```purescript
 *  | do x <- m1
 *  |    y <- m2 x
 *  |    m3 x y
 *  | ```
 */
var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};

/**
 *  | The `Monad` type class combines the operations of the `Bind` and `Applicative` type classes. Therefore, `Monad` instances
 *  | represent type constructors which support sequential composition, and also lifting of functions of arbitrary arity.
 *  |
 *  | `Monad` instances should satisfy the following laws:
 *  |
 *  | - Left Identity: `pure x >>= f = f x`
 *  | - Right Identity: `x >>= pure = x`
 *  |
 *  | Or, expressed using `do` notation:
 *  |
 *  | - Left Identity: `do { y <- pure x ; f y } = f x`
 *  | - Right Identity: `do { y <- x ; pure y } = x`
 *  |
 */
var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var Semiring = function ($times, $plus, one, zero) {
    this["*"] = $times;
    this["+"] = $plus;
    this.one = one;
    this.zero = zero;
};

/**
 *  | Addition, multiplication, modulo operation and division, satisfying:
 *  |
 *  | - ```a / b * b + (a `mod` b) = a```
 *  |
 */
var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
    this["/"] = $div;
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    this.mod = mod;
};

/**
 *  | Addition, multiplication, and subtraction.
 *  |
 *  | Has the same laws as `Semiring` but additionally satisfying:
 *  |
 *  | - `a` is an abelian group under addition
 *  |
 */
var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
    this["-"] = $minus;
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
};

/**
 *  | Ring where every nonzero element has a multiplicative inverse so that:
 *  |
 *  | - ```a `mod` b = zero```
 *  |
 */
var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
    this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
    this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
};

/**
 *  | A commutative field
 */
var Num = function (__superclass_Prelude$dotDivisionRing_0) {
    this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
};

/**
 *  | The `Eq` type class represents types which support decidable equality.
 *  |
 *  | `Eq` instances should satisfy the following laws:
 *  |
 *  | - Reflexivity: `x == x = true`
 *  | - Symmetry: `x == y = y == x`
 *  | - Transitivity: if `x == y` and `y == z` then `x == z`
 *  | - Negation: `x /= y = not (x == y)`
 *  |
 *  | `(/=)` may be implemented in terms of `(==)`, but it might give a performance improvement to implement it separately.
 */
var Eq = function ($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};

/**
 *  | The `Ord` type class represents types which support comparisons.
 *  |
 *  | `Ord` instances should satisfy the laws of _partially orderings_:
 *  |
 *  | - Reflexivity: `a <= a`
 *  | - Antisymmetry: if `a <= b` and `b <= a` then `a = b`
 *  | - Transitivity: if `a <= b` and `b <= c` then `a <= c`
 *  |
 */
var Ord = function (__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
    this[".&."] = $dot$amp$dot;
    this[".^."] = $dot$up$dot;
    this[".|."] = $dot$bar$dot;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
};

/**
 *  | The `BoolLike` type class identifies types which support Boolean operations.
 *  |
 *  | `BoolLike` instances are required to satisfy the laws of a _Boolean algebra_.
 *  |
 */
var BoolLike = function ($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};

/**
 *  | The `Semigroup` type class identifies an associative operation on a type.
 *  |
 *  | `Semigroup` instances are required to satisfy the following law:
 *  |
 *  | - Associativity: `(x <> y) <> z = x <> (y <> z)`
 *  |
 *  | For example, the `String` type is an instance of `Semigroup`, where `(<>)` is defined to be string concatenation.
 */
var Semigroup = function ($less$greater) {
    this["<>"] = $less$greater;
};

/**
 *  | The `BoolLike` type class identifies types which support Boolean operations.
 *  |
 *  | `BoolLike` instances are required to satisfy the laws of a _Boolean algebra_.
 *  |
 */
var $bar$bar = function (dict) {
    return dict["||"];
};

/**
 *  | The `Bind` type class extends the [`Apply`](#apply) type class with a "bind" operation `(>>=)` which composes computations
 *  | in sequence, using the return value of one computation to determine the next computation.
 *  |
 *  | The `>>=` operator can also be expressed using `do` notation, as follows:
 *  |
 *  | ```purescript
 *  | x >>= f = do y <- x
 *  |              f y
 *  | ```
 *  |
 *  | where the function argument of `f` is given the name `y`.
 *  |
 *  | `Bind` instances should satisfy the following law:
 *  |
 *  | - Associativity: `(x >>= f) >>= g = x >>= (\k => f k >>= g)`
 *  |
 *  | Or, expressed using `do` notation:
 *  |
 *  | - Associativity: `do { z <- do { y <- x ; f y } ; g z } = do { k <- x ; do { y <- f k ; g y } }`
 *  |
 *  | Associativity tells us that we can regroup operations which use do-notation, so that we can unambiguously write, for example:
 *  |
 *  | ```purescript
 *  | do x <- m1
 *  |    y <- m2 x
 *  |    m3 x y
 *  | ```
 */
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};

/**
 *  | The `Eq` type class represents types which support decidable equality.
 *  |
 *  | `Eq` instances should satisfy the following laws:
 *  |
 *  | - Reflexivity: `x == x = true`
 *  | - Symmetry: `x == y = y == x`
 *  | - Transitivity: if `x == y` and `y == z` then `x == z`
 *  | - Negation: `x /= y = not (x == y)`
 *  |
 *  | `(/=)` may be implemented in terms of `(==)`, but it might give a performance improvement to implement it separately.
 */
var $eq$eq = function (dict) {
    return dict["=="];
};

/**
 *  | The `Semigroup` type class identifies an associative operation on a type.
 *  |
 *  | `Semigroup` instances are required to satisfy the following law:
 *  |
 *  | - Associativity: `(x <> y) <> z = x <> (y <> z)`
 *  |
 *  | For example, the `String` type is an instance of `Semigroup`, where `(<>)` is defined to be string concatenation.
 */
var $less$greater = function (dict) {
    return dict["<>"];
};

/**
 *  | A `Semigroupoid` is similar to a [`Category`](#category) but does not require an identity
 *  | element `id`, just composable morphisms.
 *  |
 *  | `Semigroupoid`s should obey the following rule:
 *  |
 *  | - Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`
 *  |
 *  | One example of a `Semigroupoid` is the function type constructor `(->)`, with `(<<<)` defined
 *  | as function composition.
 */
var $less$less$less = function (dict) {
    return dict["<<<"];
};

/**
 *  | Forwards composition, or `(<<<)` with its arguments reversed.
 */
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};

/**
 *  | The `Apply` class provides the `(<*>)` which is used to apply a function to an argument under a type constructor.
 *  |
 *  | `Apply` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor `f`.
 *  | It might also be understood in terms of the `lift2` function:
 *  |
 *  | ```purescript
 *  | lift2 :: forall f a b c. (Apply f) => (a -> b -> c) -> f a -> f b -> f c
 *  | lift2 f a b = f <$> a <*> b
 *  | ```
 *  |
 *  | `(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts the function application operator `($)` to arguments
 *  | wrapped with the type constructor `f`.
 *  |
 *  | `Apply` instances should satisfy the following law:
 *  |
 *  | - Associative Composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`
 *  |
 *  | Formally, `Apply` represents a strong lax semi-monoidal endofunctor.
 */
var $less$times$greater = function (dict) {
    return dict["<*>"];
};

/**
 *  | A `Functor` is a type constructor which supports a mapping operation `(<$>)`.
 *  |
 *  | `(<$>)` can be used to turn functions `a -> b` into functions `f a -> f b` whose argument and return
 *  | types use the type constructor `f` to represent some computational context.
 *  |
 *  | `Functor` instances should satisfy the following laws:
 *  |
 *  | - Identity: `(<$>) id = id`
 *  | - Composition: `(<$>) (f <<< g) = (f <$>) <<< (g <$>)`
 *  |
 */
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};

/**
 *  | `(<#>)` is `(<$>)` with its arguments reversed. For example:
 *  |
 *  | ```purescript
 *  | [1, 2, 3] <#> \n -> n * n
 *  | ```
 */
var $less$hash$greater = function (__dict_Functor_1) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(__dict_Functor_1)(f)(fa);
        };
    };
};

/**
 *  | An infix alias for `cons`.
 *  |
 *  | Note, the running time of this function is `O(n)`.
 */
var $colon = cons;

/**
 *  | The `Eq` type class represents types which support decidable equality.
 *  |
 *  | `Eq` instances should satisfy the following laws:
 *  |
 *  | - Reflexivity: `x == x = true`
 *  | - Symmetry: `x == y = y == x`
 *  | - Transitivity: if `x == y` and `y == z` then `x == z`
 *  | - Negation: `x /= y = not (x == y)`
 *  |
 *  | `(/=)` may be implemented in terms of `(==)`, but it might give a performance improvement to implement it separately.
 */
var $div$eq = function (dict) {
    return dict["/="];
};

/**
 *  | Addition, multiplication, modulo operation and division, satisfying:
 *  |
 *  | - ```a / b * b + (a `mod` b) = a```
 *  |
 */
var $div = function (dict) {
    return dict["/"];
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var $dot$bar$dot = function (dict) {
    return dict[".|."];
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var $dot$up$dot = function (dict) {
    return dict[".^."];
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var $dot$amp$dot = function (dict) {
    return dict[".&."];
};

/**
 *  | Addition, multiplication, and subtraction.
 *  |
 *  | Has the same laws as `Semiring` but additionally satisfying:
 *  |
 *  | - `a` is an abelian group under addition
 *  |
 */
var $minus = function (dict) {
    return dict["-"];
};

/**
 *  | `(++)` is an alias for `(<>)`.
 */
var $plus$plus = function (__dict_Semigroup_2) {
    return $less$greater(__dict_Semigroup_2);
};

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var $plus = function (dict) {
    return dict["+"];
};

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var $times = function (dict) {
    return dict["*"];
};

/**
 *  | The `BoolLike` type class identifies types which support Boolean operations.
 *  |
 *  | `BoolLike` instances are required to satisfy the laws of a _Boolean algebra_.
 *  |
 */
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $percent = numMod;

/**
 *  | Applies a function to its argument
 *  |
 *  | ```purescript
 *  | length $ groupBy productCategory $ filter isInStock products
 *  | ```
 *  |
 *  | is equivalent to
 *  |
 *  | ```purescript
 *  | length (groupBy productCategory (filter isInStock (products)))
 *  | ```
 *  |
 *  | `($)` is different from [`(#)`](#-2) because it is right-infix instead of left, so
 *  | `a $ b $ c $ d x` = `a $ (b $ (c $ (d $ x)))` = `a (b (c (d x)))`
 *  |
 */
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};

/**
 *  | Applies a function to its argument
 *  |
 *  | ```purescript
 *  | products # groupBy productCategory # filter isInStock # length
 *  | ```
 *  |
 *  | is equivalent to
 *  |
 *  | ```purescript
 *  | length (groupBy productCategory (filter isInStock (products)))
 *  | ```
 *  |
 *  | `(#)` is different from [`($)`](#-1) because it is left-infix instead of right, so
 *  | `x # a # b # c # d` = `(((x # a) # b) # c) # d` = `d (c (b (a x)))`
 *  |
 */
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var zshr = function (dict) {
    return dict.zshr;
};

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var zero = function (dict) {
    return dict.zero;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);

/**
 *  | `unit` is the sole inhabitant of the `Unit` type.
 */
var unit = {};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_5) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_15) {
    if (_15 instanceof LT) {
        return "LT";
    };
    if (_15 instanceof GT) {
        return "GT";
    };
    if (_15 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_6) {
    if (_6) {
        return "true";
    };
    if (!_6) {
        return "false";
    };
    throw new Error("Failed pattern match");
});

/**
 *  | The `Show` type class represents those types which can be converted into a human-readable `String` representation.
 *  |
 *  | While not required, it is recommended that for any expression `x`, the string `show x` be executable PureScript code
 *  | which evaluates to the same value as the expression `x`.
 */
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_3) {
    return new Show(showArrayImpl(show(__dict_Show_3)));
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var shl = function (dict) {
    return dict.shl;
};
var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_23) {
    return function (_24) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupOrdering = new Semigroup(function (_16) {
    return function (y) {
        if (_16 instanceof LT) {
            return LT.value;
        };
        if (_16 instanceof GT) {
            return GT.value;
        };
        if (_16 instanceof EQ) {
            return y;
        };
        throw new Error("Failed pattern match");
    };
});
var semigroupArr = function (__dict_Semigroup_4) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
            };
        };
    });
};
var ringNumber = new Ring(numSub, function () {
    return semiringNumber;
});

/**
 *  | The `Applicative` type class extends the [`Apply`](#apply) type class with a `pure` function, which can be used to
 *  | create values of type `f a` from values of type `a`.
 *  |
 *  | Where [`Apply`](#apply) provides the ability to lift functions of two or more arguments to functions whose arguments are wrapped using `f`,
 *  | and [`Functor`](#functor) provides the ability to lift functions of one argument, `pure` can be seen as the function which lifts functions of
 *  | _zero_ arguments. That is, `Applicative` functors support a lifting operation for any number of function arguments.
 *  |
 *  | `Applicative` instances should satisfy the following laws:
 *  |
 *  | - Identity: `(pure id) <*> v = v`
 *  | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`
 *  | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`
 *  | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
 *  |
 */
var pure = function (dict) {
    return dict.pure;
};

/**
 *  | `return` is an alias for `pure`.
 */
var $$return = function (__dict_Monad_5) {
    return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
};

/**
 *  | An alias for `true`, which can be useful in guard clauses:
 *  |
 *  | ```purescript
 *  | max x y | x >= y = x
 *  |         | otherwise = y
 *  | ```
 *  |
 */
var otherwise = true;

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var one = function (dict) {
    return dict.one;
};

/**
 *  | The `BoolLike` type class identifies types which support Boolean operations.
 *  |
 *  | `BoolLike` instances are required to satisfy the laws of a _Boolean algebra_.
 *  |
 */
var not = function (dict) {
    return dict.not;
};
var negate = function (__dict_Ring_6) {
    return function (a) {
        return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
    };
};
var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
    return semiringNumber;
}, function (_7) {
    return function (_8) {
        return 0;
    };
});

/**
 *  | Addition, multiplication, modulo operation and division, satisfying:
 *  |
 *  | - ```a / b * b + (a `mod` b) = a```
 *  |
 */
var mod = function (dict) {
    return dict.mod;
};

/**
 *  | `liftM1` provides a default implementation of `(<$>)` for any [`Monad`](#monad),
 *  | without using `(<$>)` as provided by the [`Functor`](#functor)-[`Monad`](#monad) superclass relationship.
 *  |
 *  | `liftM1` can therefore be used to write [`Functor`](#functor) instances as follows:
 *  |
 *  | ```purescript
 *  | instance functorF :: Functor F where
 *  |   (<$>) = liftM1
 *  | ```
 */
var liftM1 = function (__dict_Monad_7) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_7)(f(_0));
            });
        };
    };
};

/**
 *  | `liftA1` provides a default implementation of `(<$>)` for any [`Applicative`](#applicative) functor,
 *  | without using `(<$>)` as provided by the [`Functor`](#functor)-[`Applicative`](#applicative) superclass relationship.
 *  |
 *  | `liftA1` can therefore be used to write [`Functor`](#functor) instances as follows:
 *  |
 *  | ```purescript
 *  | instance functorF :: Functor F where
 *  |   (<$>) = liftA1
 *  | ```
 */
var liftA1 = function (__dict_Applicative_8) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
        };
    };
};

/**
 *  | `Category`s consist of objects and composable morphisms between them, and as such are
 *  | [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids` must have an identity element.
 *  |
 *  | `Category`s should obey the following rules.
 *  |
 *  | - Left Identity: `id <<< p = p`
 *  | - Right Identity: `p <<< id = p`
 *  |
 */
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));

/**
 *  | Flips the order of the arguments to a function of two arguments.
 *  |
 *  | ```purescript
 *  | flip const 1 2 = const 2 1 = 2
 *  | ```
 *  |
 */
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_11) {
    return function (_12) {
        return false;
    };
}, function (_9) {
    return function (_10) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_17) {
    return function (_18) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_19) {
    return function (_20) {
        if (!_19 && !_20) {
            return EQ.value;
        };
        if (!_19 && _20) {
            return LT.value;
        };
        if (_19 && _20) {
            return EQ.value;
        };
        if (_19 && !_20) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var divisionRingNumber = new DivisionRing(function () {
    return moduloSemiringNumber;
}, function () {
    return ringNumber;
});
var numNumber = new Num(function () {
    return divisionRingNumber;
});

/**
 *  | Returns its first argument and ignores its second.
 *  |
 *  | ```purescript
 *  | const 1 "hello" = 1
 *  | ```
 *  |
 */
var $$const = function (a) {
    return function (_3) {
        return a;
    };
};

/**
 *  | The `void` function is used to ignore the type wrapped by a [`Functor`](#functor), replacing it with `Unit` and
 *  | keeping only the type information provided by the type constructor itself.
 *  |
 *  | `void` is often useful when using `do` notation to change the return type of a monadic computation:
 *  |
 *  | ```purescript
 *  | main = forE 1 10 \n -> void do
 *  |   print n
 *  |   print (n * n)
 *  | ```
 */
var $$void = function (__dict_Functor_10) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
    };
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var complement = function (dict) {
    return dict.complement;
};

/**
 *  | The `Ord` type class represents types which support comparisons.
 *  |
 *  | `Ord` instances should satisfy the laws of _partially orderings_:
 *  |
 *  | - Reflexivity: `a <= a`
 *  | - Antisymmetry: if `a <= b` and `b <= a` then `a = b`
 *  | - Transitivity: if `a <= b` and `b <= c` then `a <= c`
 *  |
 */
var compare = function (dict) {
    return dict.compare;
};

/**
 *  | Test whether one value is _strictly less than_ another.
 */
var $less = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _45 = compare(__dict_Ord_12)(a1)(a2);
            if (_45 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};

/**
 *  | Test whether one value is _non-strictly less than_ another.
 */
var $less$eq = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _46 = compare(__dict_Ord_13)(a1)(a2);
            if (_46 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};

/**
 *  | Test whether one value is _strictly greater than_ another.
 */
var $greater = function (__dict_Ord_14) {
    return function (a1) {
        return function (a2) {
            var _47 = compare(__dict_Ord_14)(a1)(a2);
            if (_47 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};

/**
 *  | Test whether one value is _non-strictly greater than_ another.
 */
var $greater$eq = function (__dict_Ord_15) {
    return function (a1) {
        return function (a2) {
            var _48 = compare(__dict_Ord_15)(a1)(a2);
            if (_48 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_9) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_9))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_9))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_11) {
    return new Ord(function () {
        return eqArray(__dict_Ord_11["__superclass_Prelude.Eq_0"]());
    }, function (_21) {
        return function (_22) {
            if (_21.length === 0 && _22.length === 0) {
                return EQ.value;
            };
            if (_21.length === 0) {
                return LT.value;
            };
            if (_22.length === 0) {
                return GT.value;
            };
            if (_21.length >= 1) {
                var _55 = _21.slice(1);
                if (_22.length >= 1) {
                    var _53 = _22.slice(1);
                    var _51 = compare(__dict_Ord_11)(_21[0])(_22[0]);
                    if (_51 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_11))(_55)(_53);
                    };
                    return _51;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_13) {
    return function (_14) {
        if (_13 instanceof LT && _14 instanceof LT) {
            return true;
        };
        if (_13 instanceof GT && _14 instanceof GT) {
            return true;
        };
        if (_13 instanceof EQ && _14 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);

/**
 *  | This function returns its first argument, and can be used to assert type equalities.
 *  | This can be useful when types are otherwise ambiguous.
 *  |
 *  | ```purescript
 *  | main = print $ [] `asTypeOf` [0]
 *  | ```
 *  |
 *  | If instead, we had written `main = print []`, the type of the argument `[]` would have
 *  | been ambiguous, resulting in a compile-time error.
 */
var asTypeOf = function (x) {
    return function (_4) {
        return x;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});

/**
 *  | `ap` provides a default implementation of `(<*>)` for any [`Monad`](#monad),
 *  | without using `(<*>)` as provided by the [`Apply`](#apply)-[`Monad`](#monad) superclass relationship.
 *  |
 *  | `ap` can therefore be used to write [`Apply`](#apply) instances as follows:
 *  |
 *  | ```purescript
 *  | instance applyF :: Apply F where
 *  |   (<*>) = ap
 *  | ```
 */
var ap = function (__dict_Monad_16) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_16)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    Unit: Unit, 
    LT: LT, 
    GT: GT, 
    EQ: EQ, 
    Semigroup: Semigroup, 
    BoolLike: BoolLike, 
    Bits: Bits, 
    Ord: Ord, 
    Eq: Eq, 
    Num: Num, 
    DivisionRing: DivisionRing, 
    Ring: Ring, 
    ModuloSemiring: ModuloSemiring, 
    Semiring: Semiring, 
    Monad: Monad, 
    Bind: Bind, 
    Applicative: Applicative, 
    Apply: Apply, 
    Functor: Functor, 
    Show: Show, 
    Category: Category, 
    Semigroupoid: Semigroupoid, 
    unit: unit, 
    "++": $plus$plus, 
    "<>": $less$greater, 
    not: not, 
    "||": $bar$bar, 
    "&&": $amp$amp, 
    complement: complement, 
    zshr: zshr, 
    shr: shr, 
    shl: shl, 
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    ".&.": $dot$amp$dot, 
    ">=": $greater$eq, 
    "<=": $less$eq, 
    ">": $greater, 
    "<": $less, 
    compare: compare, 
    "/=": $div$eq, 
    "==": $eq$eq, 
    negate: negate, 
    "%": $percent, 
    "-": $minus, 
    mod: mod, 
    "/": $div, 
    one: one, 
    "*": $times, 
    zero: zero, 
    "+": $plus, 
    ap: ap, 
    liftM1: liftM1, 
    "return": $$return, 
    ">>=": $greater$greater$eq, 
    liftA1: liftA1, 
    pure: pure, 
    "<*>": $less$times$greater, 
    "void": $$void, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    show: show, 
    cons: cons, 
    ":": $colon, 
    "#": $hash, 
    "$": $dollar, 
    id: id, 
    ">>>": $greater$greater$greater, 
    "<<<": $less$less$less, 
    asTypeOf: asTypeOf, 
    "const": $$const, 
    flip: flip, 
    otherwise: otherwise, 
    semigroupoidArr: semigroupoidArr, 
    categoryArr: categoryArr, 
    showUnit: showUnit, 
    showString: showString, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showArray: showArray, 
    functorArr: functorArr, 
    applyArr: applyArr, 
    applicativeArr: applicativeArr, 
    bindArr: bindArr, 
    monadArr: monadArr, 
    semiringNumber: semiringNumber, 
    ringNumber: ringNumber, 
    moduloSemiringNumber: moduloSemiringNumber, 
    divisionRingNumber: divisionRingNumber, 
    numNumber: numNumber, 
    eqUnit: eqUnit, 
    eqString: eqString, 
    eqNumber: eqNumber, 
    eqBoolean: eqBoolean, 
    eqArray: eqArray, 
    eqOrdering: eqOrdering, 
    showOrdering: showOrdering, 
    semigroupOrdering: semigroupOrdering, 
    ordUnit: ordUnit, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordArray: ordArray, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    semigroupUnit: semigroupUnit, 
    semigroupString: semigroupString, 
    semigroupArr: semigroupArr
};
